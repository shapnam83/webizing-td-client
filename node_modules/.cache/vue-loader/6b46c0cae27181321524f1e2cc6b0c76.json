{"remainingRequest":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alexander/Projects/GitHub/webizing-td-client/src/components/ThingPropertiesID.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/src/components/ThingPropertiesID.vue","mtime":1629318106811},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/cache-loader/dist/cjs.js","mtime":1570966921308},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/babel-loader/lib/index.js","mtime":1587543893999},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/cache-loader/dist/cjs.js","mtime":1570966921308},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/vue-loader/lib/index.js","mtime":1570969765705}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { mapState } from \"vuex\";\n\nexport default {\n  name: \"ThingPropertyDetails\",\n  data() {\n    return {\n      context: \"https://schema.org/\"\n    };\n  },\n  computed: {\n    property () {\n      if(!this.loading)\n        return this.$store.getters.getPropertyDetailsOfSensor(this.$route.params.thing, this.$route.params.name)\n    },\n    uriVariables () {\n      const property = this.$store.getters.getPropertyDetailsOfSensor(this.$route.params.thing, this.$route.params.name);\n      if (property.hasOwnProperty('uriVariables')) {\n        let output = [];\n        const obj = property.uriVariables;\n\n        for (const key of Object.keys(obj)) {\n          output.push({\n            name: key,\n            typeOf: obj[key]['@type'],\n            type: obj[key].type\n          });\n        }\n\n        return output;\n      }\n      return []\n    },\n    ...mapState({\n      loading: state => state.things.loading,\n      error: state => state.things.error\n    })\n  },\n  methods: {\n    thingDescriptionPropertyURL: function() {\n      return `${this.context}${this.property[\"@type\"].split(':')[1]}`;\n    },\n    ontologyLink: function(param) {\n      return `${this.context}${param}`;\n    }\n  }\n};\n",{"version":3,"sources":["ThingPropertiesID.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ThingPropertiesID.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div v-if=\"!loading\">\n      <span style=\"font-size: 20px\">\n          {{ property.title }}\n        </span>\n      <p>Type of:\n        [ <el-link\n                v-bind:href=\"thingDescriptionPropertyURL()\"\n                type=\"primary\"\n        >{{property.title}}</el-link> ]\n      </p>\n\n      <h3>Property details</h3>\n      <p>{{ property.description }}</p>\n\n      <p><b>Type:</b> {{ property.type }}</p>\n      <p v-if=\"property.type==='array'\">\n        <b>Items:</b> {{ property.items }}\n      </p>\n      <p><b>Read only:</b> {{ property.readOnly }}</p>\n      <p><b>Observable:</b> {{ property.observable }}</p>\n      <p><b>Write only:</b> {{ property.writeOnly }}</p>\n\n      <h3 v-if=\"uriVariables.length !== 0\">Uri Variables</h3>\n\n      <el-table :data=\"uriVariables\" v-if=\"uriVariables.length !== 0\" border style=\"width: 100%\">\n        <el-table-column prop=\"name\" label=\"Name of variable\" width=\"520\"></el-table-column>\n        <el-table-column prop=\"typeOf\" label=\"Type of\">\n          <template slot-scope=\"scope\">\n            <el-link\n                    v-bind:href=\"ontologyLink(scope.row.typeOf)\"\n                    type=\"primary\"\n            >{{scope.row.typeOf}}</el-link>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"type\" label=\"type\"> </el-table-column>\n      </el-table>\n\n      <h3>Forms</h3>\n\n      <el-table :data=\"property.forms\" border style=\"width: 100%\">\n        <el-table-column prop=\"href\" label=\"URL\" width=\"520\"></el-table-column>\n        <el-table-column prop=\"contentType\" label=\"Content Type\"></el-table-column>\n        <el-table-column prop=\"op\" label=\"Operation\"> </el-table-column>\n        <el-table-column prop=\"secure\" label=\"Access\"> </el-table-column>\n      </el-table>\n    </div>\n</template>\n\n<script>\n\nimport { mapState } from \"vuex\";\n\nexport default {\n  name: \"ThingPropertyDetails\",\n  data() {\n    return {\n      context: \"https://schema.org/\"\n    };\n  },\n  computed: {\n    property () {\n      if(!this.loading)\n        return this.$store.getters.getPropertyDetailsOfSensor(this.$route.params.thing, this.$route.params.name)\n    },\n    uriVariables () {\n      const property = this.$store.getters.getPropertyDetailsOfSensor(this.$route.params.thing, this.$route.params.name);\n      if (property.hasOwnProperty('uriVariables')) {\n        let output = [];\n        const obj = property.uriVariables;\n\n        for (const key of Object.keys(obj)) {\n          output.push({\n            name: key,\n            typeOf: obj[key]['@type'],\n            type: obj[key].type\n          });\n        }\n\n        return output;\n      }\n      return []\n    },\n    ...mapState({\n      loading: state => state.things.loading,\n      error: state => state.things.error\n    })\n  },\n  methods: {\n    thingDescriptionPropertyURL: function() {\n      return `${this.context}${this.property[\"@type\"].split(':')[1]}`;\n    },\n    ontologyLink: function(param) {\n      return `${this.context}${param}`;\n    }\n  }\n};\n</script>\n\n<style scoped></style>\n"]}]}