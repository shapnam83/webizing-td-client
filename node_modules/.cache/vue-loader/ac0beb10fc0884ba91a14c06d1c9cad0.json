{"remainingRequest":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alexander/Projects/GitHub/webizing-td-client/src/components/ThingProperties.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/src/components/ThingProperties.vue","mtime":1632783767584},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/babel-loader/lib/index.js","mtime":1587543893999},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/cache-loader/dist/cjs.js","mtime":1570966921308},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/vue-loader/lib/index.js","mtime":1570969765705}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from \"vuex\";\n\nexport default {\n    name: \"ThingProperties\",\n    data() {\n        return {\n            model: null,\n            error: null,\n            loading: true,\n            values: {}\n        };\n    },\n    created() {\n        this.model = this.getSensorByName(this.$route.params.thing);\n        this.fetchModelData()\n    },\n    computed: {\n        ...mapGetters([\"getSensorByName\"])\n    },\n    methods: {\n        async fetchModelData() {\n            this.loading = true;\n\n            const response = await fetch(`http://localhost:4000/graphql`, {\n                    method: \"POST\",\n                    headers: { Accept: \"application/json\",  \"Content-Type\":\"application/json\"},\n                    body: JSON.stringify({ query: `{${this.$route.params.thing} {_id ${Object.keys(this.model.properties).join(' ')}}}`})\n                }\n            );\n\n            if (!response.ok) {\n                this.error = response.statusText;\n            } else {\n                const res = await response.json();\n                const values = await res.data[this.$route.params.thing];\n\n                this.values = this.convertToArrayWithValues(values)\n            }\n            this.loading = false;\n        },\n        convertToArrayWithValues(values) {\n            let output = [];\n            if(!Array.isArray(values)) {\n                values = [values]\n            }\n\n            for (let item of values) {\n                let sensorsValues = [];\n                for (const key of Object.keys(item)) {\n                    sensorsValues.push({\n                        property: key,\n                        value: item[key]\n                    })\n\n                }\n                output.push(sensorsValues);\n            }\n\n            return output;\n        },\n    }\n}\n",{"version":3,"sources":["ThingProperties.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"ThingProperties.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div v-if=\"!loading\">\n        <h3>Properties</h3>\n        <div v-bind:key=\"item['_id']\" v-for=\"item in values\" style=\"padding-bottom: 20px;\">\n            <el-table :data=\"item\" border style=\"width: 100%; margin-bottom: 20px;\">\n                <el-table-column prop=\"property\" label=\"Property\"></el-table-column>\n                <el-table-column prop=\"value\" width=\"720\" label=\"Value\"></el-table-column>\n            </el-table>\n        </div>\n\n        <h3>Events</h3>\n        <div v-bind:key=\"item['_id']\" v-for=\"item in values\" style=\"padding-bottom: 20px;\">\n            <el-table :data=\"item\" border style=\"width: 100%; margin-bottom: 20px;\">\n                <el-table-column prop=\"property\" label=\"Property\"></el-table-column>\n                <el-table-column prop=\"procolol\" label=\"Protocol\"></el-table-column>\n                <el-table-column prop=\"value\" width=\"720\" label=\"Value\"></el-table-column>\n            </el-table>\n        </div>\n    </div>\n</template>\n\n<script>\n    import { mapGetters } from \"vuex\";\n\n    export default {\n        name: \"ThingProperties\",\n        data() {\n            return {\n                model: null,\n                error: null,\n                loading: true,\n                values: {}\n            };\n        },\n        created() {\n            this.model = this.getSensorByName(this.$route.params.thing);\n            this.fetchModelData()\n        },\n        computed: {\n            ...mapGetters([\"getSensorByName\"])\n        },\n        methods: {\n            async fetchModelData() {\n                this.loading = true;\n\n                const response = await fetch(`http://localhost:4000/graphql`, {\n                        method: \"POST\",\n                        headers: { Accept: \"application/json\",  \"Content-Type\":\"application/json\"},\n                        body: JSON.stringify({ query: `{${this.$route.params.thing} {_id ${Object.keys(this.model.properties).join(' ')}}}`})\n                    }\n                );\n\n                if (!response.ok) {\n                    this.error = response.statusText;\n                } else {\n                    const res = await response.json();\n                    const values = await res.data[this.$route.params.thing];\n\n                    this.values = this.convertToArrayWithValues(values)\n                }\n                this.loading = false;\n            },\n            convertToArrayWithValues(values) {\n                let output = [];\n                if(!Array.isArray(values)) {\n                    values = [values]\n                }\n\n                for (let item of values) {\n                    let sensorsValues = [];\n                    for (const key of Object.keys(item)) {\n                        sensorsValues.push({\n                            property: key,\n                            value: item[key]\n                        })\n\n                    }\n                    output.push(sensorsValues);\n                }\n\n                return output;\n            },\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>\n"]}]}