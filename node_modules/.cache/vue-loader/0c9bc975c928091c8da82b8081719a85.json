{"remainingRequest":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alexander/Projects/GitHub/webizing-td-client/src/components/ThingModel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/src/components/ThingModel.vue","mtime":1632788685810},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/cache-loader/dist/cjs.js","mtime":1570966921308},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/babel-loader/lib/index.js","mtime":1587543893999},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/cache-loader/dist/cjs.js","mtime":1570966921308},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/vue-loader/lib/index.js","mtime":1570969765705}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from \"vuex\";\nimport Map from \"./Map\";\n\nimport VueJsonPretty from 'vue-json-pretty'\nimport 'vue-json-pretty/lib/styles.css'\n\nexport default {\n  name: \"AirQuality\",\n  components: {\n    Map,\n    VueJsonPretty\n  },\n  data() {\n    return {\n      locations: [],\n      representation: 2\n    };\n  },\n\n  created() {\n    this.fetchLocationData();\n  },\n  computed: {\n    thingName() {\n      return this.$route.params.thing\n    },\n\n    model () {\n      return this.$store.getters.getSensorByName(this.$route.params.thing)\n    },\n    ...mapState({\n      loading: state => state.things.loading,\n      error: state => state.things.error\n    })\n  },\n  watch: {\n    '$route':'fetchLocationData'\n  },\n  methods: {\n    thingDescriptionURl: function() {\n      return `${this.model[\"@context\"][0]}${this.model[\"@type\"]}`;\n    },\n    async fetchLocationData() {\n      // this.loading = true;\n\n      const response = await fetch(`http://localhost:4000/graphql`, {\n          method: \"POST\",\n          headers: { Accept: \"application/json\",  \"Content-Type\":\"application/json\"},\n          body: JSON.stringify({ query: `{${this.$route.params.thing} {name address room location}}`})\n        }\n      );\n\n      // this.loading = false;\n\n      if (!response.ok) {\n        // this.error = response.statusText;\n      } else {\n        const res = await response.json();\n        if(res.hasOwnProperty('errors')) {\n          this.locations = []\n        } else {\n          const locations = await res.data[this.$route.params.thing];\n\n          if(Array.isArray(locations)) {\n            this.locations = locations\n          } else {\n            this.locations = [locations]\n          }\n        }\n      }\n    },\n    toogleRepresentation: function (number) {\n      this.representation = number\n    },\n    getPropertiesArray() {\n      let output = [];\n      const obj = this.model.properties;\n\n      for (const key of Object.keys(obj)) {\n        output.push({\n          property: key,\n          type: obj[key].type,\n          description: obj[key].description,\n          readOnly: obj[key].readOnly.toString()\n        });\n      }\n\n      return output;\n    },\n    getEventsArray() {\n      let output = [];\n      const obj = this.model.events;\n\n      for (const key of Object.keys(obj)) {\n        output.push({\n          event: key,\n          type: obj[key].data.type + '{' + Object.keys(obj[key].data.items.properties) + '}',\n          protocol: \"MQTT\"\n        });\n      }\n\n      return output;\n    },\n    getSecurityArray() {\n      let output = [];\n      const obj = this.model.securityDefinitions;\n\n      for (const key of Object.keys(obj)) {\n        // Type\tSecurity mechanism\tDescription\n        output.push({\n          type: key,\n          scheme: obj[key].scheme,\n          description: obj[key].description\n        });\n      }\n      return output;\n    }\n  }\n};\n",{"version":3,"sources":["ThingModel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ThingModel.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div v-if=\"!loading\">\n\n    <div style=\"display: flex; width: 100%; justify-content: flex-end;\">\n      <span style=\"font-size: 20px; margin-right: auto;\">\n        {{ model ? model.name : null }}\n      </span>\n\n      <el-button-group>\n        <el-button size=\"small\" v-on:click=\"toogleRepresentation(1)\">JSON</el-button>\n        <el-button size=\"small\" v-on:click=\"toogleRepresentation(2)\">Visual</el-button>\n        <el-button size=\"small\" v-on:click=\"toogleRepresentation(3)\">Dashboard</el-button>\n      </el-button-group>\n    </div>\n    <div v-if=\"$route.params.thing == 'ipCamera'\">\n      <router-link class=\"el-link el-link--primary is-underline\" v-bind:to=\"`/ipCamera/dashboard`\" style=\"font-size: 16px\">dashboard (in dev)</router-link>\n    </div>\n    <div v-if=\"representation==1\">\n      <br>\n      <vue-json-pretty\n      :path=\"'res'\"\n      :data=\"model\"\n      @click=\"handleClick\">\n    </vue-json-pretty>\n\n    </div>\n    <div v-if=\"representation==2\">\n\n      <p>Type of:\n        [ <el-link\n                v-bind:href=\"thingDescriptionURl()\"\n                type=\"primary\"\n        >{{model.name}}</el-link> ]\n      </p>\n      <p>Version of TD instance {{ model.version.instance }}</p>\n      <h3>Description</h3>\n      <p>{{ model.description }}</p>\n\n\n\n      <h3>Security</h3>\n\n      <el-table :data=\"getSecurityArray()\" border style=\"width: 100%\">\n        <el-table-column prop=\"type\" label=\"Type\"> </el-table-column>\n        <el-table-column prop=\"scheme\" label=\"Security mechanism\">\n        </el-table-column>\n        <el-table-column prop=\"description\" width=\"420\" label=\"Description\">\n        </el-table-column>\n      </el-table>\n\n      <h3>Properties</h3>\n\n      <el-table :data=\"getPropertiesArray()\" border style=\"width: 100%\">\n        <el-table-column width=\"180\" label=\"Property\">\n          <template slot-scope=\"scope\">\n            <router-link class=\"el-link el-link--primary is-underline\" v-bind:to=\"`${thingName}/properties/${scope.row.property}`\" style=\"font-size: 16px\">{{ scope.row.property }}</router-link>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"type\" label=\"Type\"> </el-table-column>\n        <el-table-column prop=\"description\" width=\"720\" label=\"Description\">\n        </el-table-column>\n        <el-table-column prop=\"readOnly\" label=\"ReadOnly\"> </el-table-column>\n      </el-table>\n\n      <div v-if=\"model.events\">\n        <h3>Events</h3>\n\n        <el-table :data=\"getEventsArray()\" border style=\"width: 100%\">\n          <el-table-column prop=\"event\" label=\"Event\"> </el-table-column>\n          <el-table-column prop=\"type\" width=\"720\" label=\"Type\"></el-table-column>\n          <el-table-column prop=\"protocol\" width=\"720\" label=\"Protocol\"></el-table-column>\n        </el-table>\n      </div>\n      \n\n      <h3>Forms</h3>\n\n      <el-table :data=\"model.forms\" border style=\"width: 100%\">\n        <el-table-column prop=\"href\" label=\"URL\" width=\"520\"> </el-table-column>\n        <el-table-column prop=\"contentType\" label=\"Content Type\">\n        </el-table-column>\n        <el-table-column prop=\"op\" label=\"Operation\"> </el-table-column>\n        <el-table-column prop=\"secure\" label=\"Access\"> </el-table-column>\n      </el-table>\n    </div>\n\n  <div v-if=\"representation==3\">\n    dashboard\n  </div>\n\n  </div>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\nimport Map from \"./Map\";\n\nimport VueJsonPretty from 'vue-json-pretty'\nimport 'vue-json-pretty/lib/styles.css'\n\nexport default {\n  name: \"AirQuality\",\n  components: {\n    Map,\n    VueJsonPretty\n  },\n  data() {\n    return {\n      locations: [],\n      representation: 2\n    };\n  },\n\n  created() {\n    this.fetchLocationData();\n  },\n  computed: {\n    thingName() {\n      return this.$route.params.thing\n    },\n\n    model () {\n      return this.$store.getters.getSensorByName(this.$route.params.thing)\n    },\n    ...mapState({\n      loading: state => state.things.loading,\n      error: state => state.things.error\n    })\n  },\n  watch: {\n    '$route':'fetchLocationData'\n  },\n  methods: {\n    thingDescriptionURl: function() {\n      return `${this.model[\"@context\"][0]}${this.model[\"@type\"]}`;\n    },\n    async fetchLocationData() {\n      // this.loading = true;\n\n      const response = await fetch(`http://localhost:4000/graphql`, {\n          method: \"POST\",\n          headers: { Accept: \"application/json\",  \"Content-Type\":\"application/json\"},\n          body: JSON.stringify({ query: `{${this.$route.params.thing} {name address room location}}`})\n        }\n      );\n\n      // this.loading = false;\n\n      if (!response.ok) {\n        // this.error = response.statusText;\n      } else {\n        const res = await response.json();\n        if(res.hasOwnProperty('errors')) {\n          this.locations = []\n        } else {\n          const locations = await res.data[this.$route.params.thing];\n\n          if(Array.isArray(locations)) {\n            this.locations = locations\n          } else {\n            this.locations = [locations]\n          }\n        }\n      }\n    },\n    toogleRepresentation: function (number) {\n      this.representation = number\n    },\n    getPropertiesArray() {\n      let output = [];\n      const obj = this.model.properties;\n\n      for (const key of Object.keys(obj)) {\n        output.push({\n          property: key,\n          type: obj[key].type,\n          description: obj[key].description,\n          readOnly: obj[key].readOnly.toString()\n        });\n      }\n\n      return output;\n    },\n    getEventsArray() {\n      let output = [];\n      const obj = this.model.events;\n\n      for (const key of Object.keys(obj)) {\n        output.push({\n          event: key,\n          type: obj[key].data.type + '{' + Object.keys(obj[key].data.items.properties) + '}',\n          protocol: \"MQTT\"\n        });\n      }\n\n      return output;\n    },\n    getSecurityArray() {\n      let output = [];\n      const obj = this.model.securityDefinitions;\n\n      for (const key of Object.keys(obj)) {\n        // Type\tSecurity mechanism\tDescription\n        output.push({\n          type: key,\n          scheme: obj[key].scheme,\n          description: obj[key].description\n        });\n      }\n      return output;\n    }\n  }\n};\n</script>\n\n<style></style>\n"]}]}