{"remainingRequest":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/thread-loader/dist/cjs.js!/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/babel-loader/lib/index.js!/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alexander/Projects/GitHub/webizing-td-client/src/components/ThingProperties.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/src/components/ThingProperties.vue","mtime":1632783767584},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/cache-loader/dist/cjs.js","mtime":1570966921308},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/thread-loader/dist/cjs.js","mtime":1570969765657},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/babel-loader/lib/index.js","mtime":1587543893999},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/cache-loader/dist/cjs.js","mtime":1570966921308},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/vue-loader/lib/index.js","mtime":1570969765705}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from \"vuex\";\nexport default {\n  name: \"ThingProperties\",\n  data: function data() {\n    return {\n      model: null,\n      error: null,\n      loading: true,\n      values: {}\n    };\n  },\n  created: function created() {\n    this.model = this.getSensorByName(this.$route.params.thing);\n    this.fetchModelData();\n  },\n  computed: _objectSpread({}, mapGetters([\"getSensorByName\"])),\n  methods: {\n    fetchModelData: function () {\n      var _fetchModelData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var response, res, values;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.loading = true;\n                _context.next = 3;\n                return fetch(\"http://localhost:4000/graphql\", {\n                  method: \"POST\",\n                  headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: JSON.stringify({\n                    query: \"{\".concat(this.$route.params.thing, \" {_id \").concat(Object.keys(this.model.properties).join(' '), \"}}\")\n                  })\n                });\n\n              case 3:\n                response = _context.sent;\n\n                if (response.ok) {\n                  _context.next = 8;\n                  break;\n                }\n\n                this.error = response.statusText;\n                _context.next = 15;\n                break;\n\n              case 8:\n                _context.next = 10;\n                return response.json();\n\n              case 10:\n                res = _context.sent;\n                _context.next = 13;\n                return res.data[this.$route.params.thing];\n\n              case 13:\n                values = _context.sent;\n                this.values = this.convertToArrayWithValues(values);\n\n              case 15:\n                this.loading = false;\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetchModelData() {\n        return _fetchModelData.apply(this, arguments);\n      }\n\n      return fetchModelData;\n    }(),\n    convertToArrayWithValues: function convertToArrayWithValues(values) {\n      var output = [];\n\n      if (!Array.isArray(values)) {\n        values = [values];\n      }\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n          var sensorsValues = [];\n\n          for (var _i = 0, _Object$keys = Object.keys(item); _i < _Object$keys.length; _i++) {\n            var key = _Object$keys[_i];\n            sensorsValues.push({\n              property: key,\n              value: item[key]\n            });\n          }\n\n          output.push(sensorsValues);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return output;\n    }\n  }\n};",{"version":3,"sources":["ThingProperties.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAAA,UAAA,QAAA,MAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,iBADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,IADA;AAEA,MAAA,KAAA,EAAA,IAFA;AAGA,MAAA,OAAA,EAAA,IAHA;AAIA,MAAA,MAAA,EAAA;AAJA,KAAA;AAMA,GATA;AAUA,EAAA,OAVA,qBAUA;AACA,SAAA,KAAA,GAAA,KAAA,eAAA,CAAA,KAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA;AACA,SAAA,cAAA;AACA,GAbA;AAcA,EAAA,QAAA,oBACA,UAAA,CAAA,CAAA,iBAAA,CAAA,CADA,CAdA;AAiBA,EAAA,OAAA,EAAA;AACA,IAAA,cADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,qBAAA,OAAA,GAAA,IAAA;AAFA;AAAA,uBAIA,KAAA,kCAAA;AACA,kBAAA,MAAA,EAAA,MADA;AAEA,kBAAA,OAAA,EAAA;AAAA,oBAAA,MAAA,EAAA,kBAAA;AAAA,oCAAA;AAAA,mBAFA;AAGA,kBAAA,IAAA,EAAA,IAAA,CAAA,SAAA,CAAA;AAAA,oBAAA,KAAA,aAAA,KAAA,MAAA,CAAA,MAAA,CAAA,KAAA,mBAAA,MAAA,CAAA,IAAA,CAAA,KAAA,KAAA,CAAA,UAAA,EAAA,IAAA,CAAA,GAAA,CAAA;AAAA,mBAAA;AAHA,iBAAA,CAJA;;AAAA;AAIA,gBAAA,QAJA;;AAAA,oBAWA,QAAA,CAAA,EAXA;AAAA;AAAA;AAAA;;AAYA,qBAAA,KAAA,GAAA,QAAA,CAAA,UAAA;AAZA;AAAA;;AAAA;AAAA;AAAA,uBAcA,QAAA,CAAA,IAAA,EAdA;;AAAA;AAcA,gBAAA,GAdA;AAAA;AAAA,uBAeA,GAAA,CAAA,IAAA,CAAA,KAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAfA;;AAAA;AAeA,gBAAA,MAfA;AAiBA,qBAAA,MAAA,GAAA,KAAA,wBAAA,CAAA,MAAA,CAAA;;AAjBA;AAmBA,qBAAA,OAAA,GAAA,KAAA;;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqBA,IAAA,wBArBA,oCAqBA,MArBA,EAqBA;AACA,UAAA,MAAA,GAAA,EAAA;;AACA,UAAA,CAAA,KAAA,CAAA,OAAA,CAAA,MAAA,CAAA,EAAA;AACA,QAAA,MAAA,GAAA,CAAA,MAAA,CAAA;AACA;;AAJA;AAAA;AAAA;;AAAA;AAMA,6BAAA,MAAA,8HAAA;AAAA,cAAA,IAAA;AACA,cAAA,aAAA,GAAA,EAAA;;AACA,0CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,kCAAA;AAAA,gBAAA,GAAA,mBAAA;AACA,YAAA,aAAA,CAAA,IAAA,CAAA;AACA,cAAA,QAAA,EAAA,GADA;AAEA,cAAA,KAAA,EAAA,IAAA,CAAA,GAAA;AAFA,aAAA;AAKA;;AACA,UAAA,MAAA,CAAA,IAAA,CAAA,aAAA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,aAAA,MAAA;AACA;AAxCA;AAjBA,CAAA","sourcesContent":["<template>\n    <div v-if=\"!loading\">\n        <h3>Properties</h3>\n        <div v-bind:key=\"item['_id']\" v-for=\"item in values\" style=\"padding-bottom: 20px;\">\n            <el-table :data=\"item\" border style=\"width: 100%; margin-bottom: 20px;\">\n                <el-table-column prop=\"property\" label=\"Property\"></el-table-column>\n                <el-table-column prop=\"value\" width=\"720\" label=\"Value\"></el-table-column>\n            </el-table>\n        </div>\n\n        <h3>Events</h3>\n        <div v-bind:key=\"item['_id']\" v-for=\"item in values\" style=\"padding-bottom: 20px;\">\n            <el-table :data=\"item\" border style=\"width: 100%; margin-bottom: 20px;\">\n                <el-table-column prop=\"property\" label=\"Property\"></el-table-column>\n                <el-table-column prop=\"procolol\" label=\"Protocol\"></el-table-column>\n                <el-table-column prop=\"value\" width=\"720\" label=\"Value\"></el-table-column>\n            </el-table>\n        </div>\n    </div>\n</template>\n\n<script>\n    import { mapGetters } from \"vuex\";\n\n    export default {\n        name: \"ThingProperties\",\n        data() {\n            return {\n                model: null,\n                error: null,\n                loading: true,\n                values: {}\n            };\n        },\n        created() {\n            this.model = this.getSensorByName(this.$route.params.thing);\n            this.fetchModelData()\n        },\n        computed: {\n            ...mapGetters([\"getSensorByName\"])\n        },\n        methods: {\n            async fetchModelData() {\n                this.loading = true;\n\n                const response = await fetch(`http://localhost:4000/graphql`, {\n                        method: \"POST\",\n                        headers: { Accept: \"application/json\",  \"Content-Type\":\"application/json\"},\n                        body: JSON.stringify({ query: `{${this.$route.params.thing} {_id ${Object.keys(this.model.properties).join(' ')}}}`})\n                    }\n                );\n\n                if (!response.ok) {\n                    this.error = response.statusText;\n                } else {\n                    const res = await response.json();\n                    const values = await res.data[this.$route.params.thing];\n\n                    this.values = this.convertToArrayWithValues(values)\n                }\n                this.loading = false;\n            },\n            convertToArrayWithValues(values) {\n                let output = [];\n                if(!Array.isArray(values)) {\n                    values = [values]\n                }\n\n                for (let item of values) {\n                    let sensorsValues = [];\n                    for (const key of Object.keys(item)) {\n                        sensorsValues.push({\n                            property: key,\n                            value: item[key]\n                        })\n\n                    }\n                    output.push(sensorsValues);\n                }\n\n                return output;\n            },\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>\n"],"sourceRoot":"src/components"}]}