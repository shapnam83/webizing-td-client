{"remainingRequest":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/thread-loader/dist/cjs.js!/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/babel-loader/lib/index.js!/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alexander/Projects/GitHub/webizing-td-client/src/components/ThingModel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/src/components/ThingModel.vue","mtime":1632788685810},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/cache-loader/dist/cjs.js","mtime":1570966921308},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/thread-loader/dist/cjs.js","mtime":1570969765657},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/babel-loader/lib/index.js","mtime":1587543893999},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/cache-loader/dist/cjs.js","mtime":1570966921308},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/vue-loader/lib/index.js","mtime":1570969765705}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from \"vuex\";\nimport Map from \"./Map\";\nimport VueJsonPretty from 'vue-json-pretty';\nimport 'vue-json-pretty/lib/styles.css';\nexport default {\n  name: \"AirQuality\",\n  components: {\n    Map: Map,\n    VueJsonPretty: VueJsonPretty\n  },\n  data: function data() {\n    return {\n      locations: [],\n      representation: 2\n    };\n  },\n  created: function created() {\n    this.fetchLocationData();\n  },\n  computed: _objectSpread({\n    thingName: function thingName() {\n      return this.$route.params.thing;\n    },\n    model: function model() {\n      return this.$store.getters.getSensorByName(this.$route.params.thing);\n    }\n  }, mapState({\n    loading: function loading(state) {\n      return state.things.loading;\n    },\n    error: function error(state) {\n      return state.things.error;\n    }\n  })),\n  watch: {\n    '$route': 'fetchLocationData'\n  },\n  methods: {\n    thingDescriptionURl: function thingDescriptionURl() {\n      return \"\".concat(this.model[\"@context\"][0]).concat(this.model[\"@type\"]);\n    },\n    fetchLocationData: function () {\n      var _fetchLocationData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var response, res, locations;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"http://localhost:4000/graphql\", {\n                  method: \"POST\",\n                  headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: JSON.stringify({\n                    query: \"{\".concat(this.$route.params.thing, \" {name address room location}}\")\n                  })\n                });\n\n              case 2:\n                response = _context.sent;\n\n                if (response.ok) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 17;\n                break;\n\n              case 6:\n                _context.next = 8;\n                return response.json();\n\n              case 8:\n                res = _context.sent;\n\n                if (!res.hasOwnProperty('errors')) {\n                  _context.next = 13;\n                  break;\n                }\n\n                this.locations = [];\n                _context.next = 17;\n                break;\n\n              case 13:\n                _context.next = 15;\n                return res.data[this.$route.params.thing];\n\n              case 15:\n                locations = _context.sent;\n\n                if (Array.isArray(locations)) {\n                  this.locations = locations;\n                } else {\n                  this.locations = [locations];\n                }\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetchLocationData() {\n        return _fetchLocationData.apply(this, arguments);\n      }\n\n      return fetchLocationData;\n    }(),\n    toogleRepresentation: function toogleRepresentation(number) {\n      this.representation = number;\n    },\n    getPropertiesArray: function getPropertiesArray() {\n      var output = [];\n      var obj = this.model.properties;\n\n      for (var _i = 0, _Object$keys = Object.keys(obj); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        output.push({\n          property: key,\n          type: obj[key].type,\n          description: obj[key].description,\n          readOnly: obj[key].readOnly.toString()\n        });\n      }\n\n      return output;\n    },\n    getEventsArray: function getEventsArray() {\n      var output = [];\n      var obj = this.model.events;\n\n      for (var _i2 = 0, _Object$keys2 = Object.keys(obj); _i2 < _Object$keys2.length; _i2++) {\n        var key = _Object$keys2[_i2];\n        output.push({\n          event: key,\n          type: obj[key].data.type + '{' + Object.keys(obj[key].data.items.properties) + '}',\n          protocol: \"MQTT\"\n        });\n      }\n\n      return output;\n    },\n    getSecurityArray: function getSecurityArray() {\n      var output = [];\n      var obj = this.model.securityDefinitions;\n\n      for (var _i3 = 0, _Object$keys3 = Object.keys(obj); _i3 < _Object$keys3.length; _i3++) {\n        var key = _Object$keys3[_i3];\n        // Type\tSecurity mechanism\tDescription\n        output.push({\n          type: key,\n          scheme: obj[key].scheme,\n          description: obj[key].description\n        });\n      }\n\n      return output;\n    }\n  }\n};",{"version":3,"sources":["ThingModel.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div v-if=\"!loading\">\n\n    <div style=\"display: flex; width: 100%; justify-content: flex-end;\">\n      <span style=\"font-size: 20px; margin-right: auto;\">\n        {{ model ? model.name : null }}\n      </span>\n\n      <el-button-group>\n        <el-button size=\"small\" v-on:click=\"toogleRepresentation(1)\">JSON</el-button>\n        <el-button size=\"small\" v-on:click=\"toogleRepresentation(2)\">Visual</el-button>\n        <el-button size=\"small\" v-on:click=\"toogleRepresentation(3)\">Dashboard</el-button>\n      </el-button-group>\n    </div>\n    <div v-if=\"$route.params.thing == 'ipCamera'\">\n      <router-link class=\"el-link el-link--primary is-underline\" v-bind:to=\"`/ipCamera/dashboard`\" style=\"font-size: 16px\">dashboard (in dev)</router-link>\n    </div>\n    <div v-if=\"representation==1\">\n      <br>\n      <vue-json-pretty\n      :path=\"'res'\"\n      :data=\"model\"\n      @click=\"handleClick\">\n    </vue-json-pretty>\n\n    </div>\n    <div v-if=\"representation==2\">\n\n      <p>Type of:\n        [ <el-link\n                v-bind:href=\"thingDescriptionURl()\"\n                type=\"primary\"\n        >{{model.name}}</el-link> ]\n      </p>\n      <p>Version of TD instance {{ model.version.instance }}</p>\n      <h3>Description</h3>\n      <p>{{ model.description }}</p>\n\n\n\n      <h3>Security</h3>\n\n      <el-table :data=\"getSecurityArray()\" border style=\"width: 100%\">\n        <el-table-column prop=\"type\" label=\"Type\"> </el-table-column>\n        <el-table-column prop=\"scheme\" label=\"Security mechanism\">\n        </el-table-column>\n        <el-table-column prop=\"description\" width=\"420\" label=\"Description\">\n        </el-table-column>\n      </el-table>\n\n      <h3>Properties</h3>\n\n      <el-table :data=\"getPropertiesArray()\" border style=\"width: 100%\">\n        <el-table-column width=\"180\" label=\"Property\">\n          <template slot-scope=\"scope\">\n            <router-link class=\"el-link el-link--primary is-underline\" v-bind:to=\"`${thingName}/properties/${scope.row.property}`\" style=\"font-size: 16px\">{{ scope.row.property }}</router-link>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"type\" label=\"Type\"> </el-table-column>\n        <el-table-column prop=\"description\" width=\"720\" label=\"Description\">\n        </el-table-column>\n        <el-table-column prop=\"readOnly\" label=\"ReadOnly\"> </el-table-column>\n      </el-table>\n\n      <div v-if=\"model.events\">\n        <h3>Events</h3>\n\n        <el-table :data=\"getEventsArray()\" border style=\"width: 100%\">\n          <el-table-column prop=\"event\" label=\"Event\"> </el-table-column>\n          <el-table-column prop=\"type\" width=\"720\" label=\"Type\"></el-table-column>\n          <el-table-column prop=\"protocol\" width=\"720\" label=\"Protocol\"></el-table-column>\n        </el-table>\n      </div>\n      \n\n      <h3>Forms</h3>\n\n      <el-table :data=\"model.forms\" border style=\"width: 100%\">\n        <el-table-column prop=\"href\" label=\"URL\" width=\"520\"> </el-table-column>\n        <el-table-column prop=\"contentType\" label=\"Content Type\">\n        </el-table-column>\n        <el-table-column prop=\"op\" label=\"Operation\"> </el-table-column>\n        <el-table-column prop=\"secure\" label=\"Access\"> </el-table-column>\n      </el-table>\n    </div>\n\n  <div v-if=\"representation==3\">\n    dashboard\n  </div>\n\n  </div>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\nimport Map from \"./Map\";\n\nimport VueJsonPretty from 'vue-json-pretty'\nimport 'vue-json-pretty/lib/styles.css'\n\nexport default {\n  name: \"AirQuality\",\n  components: {\n    Map,\n    VueJsonPretty\n  },\n  data() {\n    return {\n      locations: [],\n      representation: 2\n    };\n  },\n\n  created() {\n    this.fetchLocationData();\n  },\n  computed: {\n    thingName() {\n      return this.$route.params.thing\n    },\n\n    model () {\n      return this.$store.getters.getSensorByName(this.$route.params.thing)\n    },\n    ...mapState({\n      loading: state => state.things.loading,\n      error: state => state.things.error\n    })\n  },\n  watch: {\n    '$route':'fetchLocationData'\n  },\n  methods: {\n    thingDescriptionURl: function() {\n      return `${this.model[\"@context\"][0]}${this.model[\"@type\"]}`;\n    },\n    async fetchLocationData() {\n      // this.loading = true;\n\n      const response = await fetch(`http://localhost:4000/graphql`, {\n          method: \"POST\",\n          headers: { Accept: \"application/json\",  \"Content-Type\":\"application/json\"},\n          body: JSON.stringify({ query: `{${this.$route.params.thing} {name address room location}}`})\n        }\n      );\n\n      // this.loading = false;\n\n      if (!response.ok) {\n        // this.error = response.statusText;\n      } else {\n        const res = await response.json();\n        if(res.hasOwnProperty('errors')) {\n          this.locations = []\n        } else {\n          const locations = await res.data[this.$route.params.thing];\n\n          if(Array.isArray(locations)) {\n            this.locations = locations\n          } else {\n            this.locations = [locations]\n          }\n        }\n      }\n    },\n    toogleRepresentation: function (number) {\n      this.representation = number\n    },\n    getPropertiesArray() {\n      let output = [];\n      const obj = this.model.properties;\n\n      for (const key of Object.keys(obj)) {\n        output.push({\n          property: key,\n          type: obj[key].type,\n          description: obj[key].description,\n          readOnly: obj[key].readOnly.toString()\n        });\n      }\n\n      return output;\n    },\n    getEventsArray() {\n      let output = [];\n      const obj = this.model.events;\n\n      for (const key of Object.keys(obj)) {\n        output.push({\n          event: key,\n          type: obj[key].data.type + '{' + Object.keys(obj[key].data.items.properties) + '}',\n          protocol: \"MQTT\"\n        });\n      }\n\n      return output;\n    },\n    getSecurityArray() {\n      let output = [];\n      const obj = this.model.securityDefinitions;\n\n      for (const key of Object.keys(obj)) {\n        // Type\tSecurity mechanism\tDescription\n        output.push({\n          type: key,\n          scheme: obj[key].scheme,\n          description: obj[key].description\n        });\n      }\n      return output;\n    }\n  }\n};\n</script>\n\n<style></style>\n"],"sourceRoot":"src/components"}]}