{"remainingRequest":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/babel-loader/lib/index.js!/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/alexander/Projects/GitHub/webizing-td-client/src/components/Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/src/components/Dashboard.vue","mtime":1629302968479},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/cache-loader/dist/cjs.js","mtime":1570966921308},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/babel-loader/lib/index.js","mtime":1587543893999},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/cache-loader/dist/cjs.js","mtime":1570966921308},{"path":"/Users/alexander/Projects/GitHub/webizing-td-client/node_modules/vue-loader/lib/index.js","mtime":1570969765705}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport io from \"socket.io-client\";\nvar socket = io.connect(\"http://192.168.0.69:4000\");\nexport default {\n  name: \"Dashboard\",\n  data: function data() {\n    return {\n      led: false,\n      motion: false,\n      gyroscope: {},\n      light: false,\n      motionFlag: false,\n      lightFlag: false,\n      gyro: {}\n    };\n  },\n  created: function created() {\n    this.getRealtimeData();\n  },\n  methods: {\n    swicthLed: function swicthLed() {\n      fetch('http://192.168.0.69:4000/pi/led', {\n        method: 'POST',\n        // or 'PUT'\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          onoff: !this.led\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log('Success:', data);\n      }).catch(function (error) {\n        console.error('Error:', error);\n      });\n    },\n    swicthMotion: function swicthMotion() {\n      fetch('http://192.168.0.69:4000/pi/motion-act', {\n        method: 'POST',\n        // or 'PUT'\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          onoff: !this.motionFlag\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log('Success:', data);\n      }).catch(function (error) {\n        console.error('Error:', error);\n      });\n    },\n    swicthLight: function swicthLight() {\n      fetch('http://192.168.0.69:4000/pi/light-act', {\n        method: 'POST',\n        // or 'PUT'\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          onoff: !this.lightFlag\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log('Success:', data);\n      }).catch(function (error) {\n        console.error('Error:', error);\n      });\n    },\n    swicthPir: function swicthPir() {\n      this.motion = !this.motion;\n    },\n    getRealtimeData: function getRealtimeData() {\n      var _this = this;\n\n      socket.on(\"sensors\", function (fetchedData) {\n        _this.led = fetchedData.led == 1 ? true : false;\n        _this.motion = fetchedData.motion == 1 ? true : false;\n        _this.light = fetchedData.light == 1 ? true : false;\n        _this.motionFlag = fetchedData.motionFlag;\n        _this.lightFlag = fetchedData.lightFlag;\n        _this.gyro = fetchedData.gyro;\n      });\n    }\n  }\n};",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n      <div style=\"font-size: 20px; margin-right: auto; padding-bottom:12px;\">\n        Raspberry Pi Sensors\n      </div>\n<el-row :gutter=\"12\" style=\"padding-bottom: 5px;\">\n  <el-col :span=\"8\">\n    <el-card shadow=\"never\" style=\"height: 177px;\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span>Led</span>\n      </div>\n      <div style=\"display: flex;justify-content: center;\">\n          <div v-if=\"led == true\">\n            <img width=\"64\" height=\"64\" src=\"../../icons/led-on.png\">\n          </div>\n          <div v-else>\n            <img width=\"64\" height=\"64\" src=\"../../icons/led-off.png\">\n          </div>\n\n          <el-button :disabled=\"this.motionFlag == true || this.lightFlag == true\" style=\"float: right; margin-left: 3px\" size=\"mini\" v-on:click=\"swicthLed()\">{{this.led ? 'Turn off' : 'Turn on'}}</el-button>\n      </div>\n    </el-card>\n  </el-col>\n  <el-col :span=\"8\">\n    <el-card shadow=\"never\" style=\"height: 177px;\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span>Motion PIR</span>\n      </div>\n      <div style=\"display: flex;justify-content: center;\">\n      <img width=\"64\" height=\"64\" src=\"../../icons/motion.png\">\n\n      <div class=\"center\" v-on:click=\"swicthPir()\">{{this.motion ? 'Detected' : 'Undetected'}}</div>\n      </div>\n      \n    </el-card>\n  </el-col>\n  <el-col :span=\"8\">\n    <el-card shadow=\"never\" style=\"height: 177px;\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span>Light</span>\n      </div>\n      <div style=\"display: flex;justify-content: center;\">\n      <div v-if=\"light == true\">\n            <img width=\"64\" height=\"64\" src=\"../../icons/moon.png\" v-on:click=\"swicthLight()\">\n          </div>\n          <div v-else>\n            <img width=\"64\" height=\"64\" src=\"../../icons/sun.png\" v-on:click=\"swicthLight()\">\n          </div>\n      </div>\n    </el-card>\n  </el-col>\n</el-row>\n\n<el-row :gutter=\"24\">\n   <el-col :span=\"24\">\n    <el-card shadow=\"never\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span>Gyroscope</span>\n      </div>\n      <div style=\"display: flex;justify-content: center; flex-direction: raw; align-items: center; width: 100%\">\n        <div><img width=\"64\" height=\"64\" src=\"../../icons/gyroscope.png\" ></div>\n        <div>X: {{this.gyro.gyro.x}}<br> Y: {{this.gyro.gyro.y}}<br> Z: {{this.gyro.gyro.z}}</div>\n      </div>\n      \n    </el-card>\n  </el-col>\n</el-row>\n\n<div style=\"font-size: 20px; margin-right: auto; padding-bottom:12px; padding-top:12px;\">\n        Raspberry Pi Actions\n      </div>\n      <span style=\"padding-right: 5px;\">Automatically turn on/off the led when motion is detected</span> <el-button size=\"mini\" v-on:click=\"swicthMotion()\">{{this.motionFlag ? 'Turn off': 'Turn on'}}</el-button>\n      <br>\n      <span style=\"padding-right: 5px;\">Automatically turn on/off the led when dark/sun</span> <el-button size=\"mini\" v-on:click=\"swicthLight()\">{{this.lightFlag ? 'Turn off': 'Turn on'}}</el-button>\n\n    </div>\n</template>\n\n<script>\nimport io from \"socket.io-client\";\nconst socket = io.connect(\"http://192.168.0.69:4000\");\n \n    export default {\n        name: \"Dashboard\",\n        data() {\n            return {\n                led: false,\n                motion: false,\n                gyroscope: {\n\n                },\n                light: false,\n                motionFlag: false,\n                lightFlag: false,\n                gyro: {}\n            }\n        },\n        created() {\n          this.getRealtimeData()\n        },\n        methods: {\n          swicthLed() {\n            fetch('http://192.168.0.69:4000/pi/led', {\n              method: 'POST', // or 'PUT'\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({onoff: !this.led}),\n            })\n            .then(response => response.json())\n            .then(data => {\n              console.log('Success:', data);\n            })\n            .catch((error) => {\n              console.error('Error:', error);\n            });\n          },\n          swicthMotion(){\n        fetch('http://192.168.0.69:4000/pi/motion-act', {\n              method: 'POST', // or 'PUT'\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({onoff: !this.motionFlag}),\n            })\n            .then(response => response.json())\n            .then(data => {\n              console.log('Success:', data);\n            })\n            .catch((error) => {\n              console.error('Error:', error);\n            });\n          },\n          swicthLight() {\n            fetch('http://192.168.0.69:4000/pi/light-act', {\n              method: 'POST', // or 'PUT'\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({onoff: !this.lightFlag}),\n            })\n            .then(response => response.json())\n            .then(data => {\n              console.log('Success:', data);\n            })\n            .catch((error) => {\n              console.error('Error:', error);\n            });\n          },\n\n          swicthPir() {\n\n            this.motion = !this.motion\n          },\n           getRealtimeData() {\n            socket.on(\"sensors\", fetchedData => {\n              this.led = fetchedData.led == 1 ? true: false;\n              this.motion = fetchedData.motion == 1 ? true: false;\n              this.light = fetchedData.light == 1 ? true: false;\n              this.motionFlag =  fetchedData.motionFlag;\n              this.lightFlag =  fetchedData.lightFlag;\n              this.gyro = fetchedData.gyro;\n            })\n          },\n        }\n    }\n</script>\n\n<style scoped>\n#divider {\n  margin-bottom: 24px;\n}\n.center {\n  height: 70px;\n  line-height: 70px; /* same as height! */\n}\n</style>"],"sourceRoot":"src/components"}]}